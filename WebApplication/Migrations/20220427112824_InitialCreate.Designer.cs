// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApp.Data;

#nullable disable

namespace WebApp.Migrations
{
    [DbContext(typeof(WebDBContext))]
    [Migration("20220427112824_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WebApp.Models.Author", b =>
                {
                    b.Property<int>("author_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("author_id"), 1L, 1);

                    b.Property<int?>("authorBooksid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("author_id");

                    b.HasIndex("authorBooksid");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("WebApp.Models.AuthorBook", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int>("author_id")
                        .HasColumnType("int");

                    b.Property<int>("book_id")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("WebApp.Models.Book", b =>
                {
                    b.Property<int>("book_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("book_id"), 1L, 1);

                    b.Property<int?>("AuthorBookid")
                        .HasColumnType("int");

                    b.Property<string>("category_type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("message_id")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("publisher")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stock_id")
                        .HasColumnType("int");

                    b.HasKey("book_id");

                    b.HasIndex("AuthorBookid");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("WebApp.Models.Category", b =>
                {
                    b.Property<string>("category_type")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("category_id")
                        .HasColumnType("int");

                    b.HasKey("category_type");

                    b.HasIndex("book_id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("WebApp.Models.Library", b =>
                {
                    b.Property<int>("stock_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("stock_id"), 1L, 1);

                    b.Property<int?>("book_id")
                        .HasColumnType("int");

                    b.Property<int>("borrowed_books")
                        .HasColumnType("int");

                    b.Property<int>("total_nr_of_books")
                        .HasColumnType("int");

                    b.HasKey("stock_id");

                    b.HasIndex("book_id");

                    b.ToTable("Library");
                });

            modelBuilder.Entity("WebApp.Models.Message", b =>
                {
                    b.Property<int>("message_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("message_id"), 1L, 1);

                    b.Property<int?>("book_id")
                        .HasColumnType("int");

                    b.Property<string>("subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("message_id");

                    b.HasIndex("book_id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WebApp.Models.User", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"), 1L, 1);

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("is_admin")
                        .HasColumnType("bit");

                    b.Property<int?>("message_id")
                        .HasColumnType("int");

                    b.Property<string>("password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("user_id");

                    b.HasIndex("message_id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("WebApp.Models.Author", b =>
                {
                    b.HasOne("WebApp.Models.AuthorBook", "authorBooks")
                        .WithMany("Authors")
                        .HasForeignKey("authorBooksid");

                    b.Navigation("authorBooks");
                });

            modelBuilder.Entity("WebApp.Models.Book", b =>
                {
                    b.HasOne("WebApp.Models.AuthorBook", "AuthorBook")
                        .WithMany("Books")
                        .HasForeignKey("AuthorBookid");

                    b.Navigation("AuthorBook");
                });

            modelBuilder.Entity("WebApp.Models.Category", b =>
                {
                    b.HasOne("WebApp.Models.Book", "Book")
                        .WithMany("Category")
                        .HasForeignKey("book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebApp.Models.Library", b =>
                {
                    b.HasOne("WebApp.Models.Book", "Book")
                        .WithMany("Library")
                        .HasForeignKey("book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebApp.Models.Message", b =>
                {
                    b.HasOne("WebApp.Models.Book", "Book")
                        .WithMany("Message")
                        .HasForeignKey("book_id");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("WebApp.Models.User", b =>
                {
                    b.HasOne("WebApp.Models.Message", "Message")
                        .WithMany("User")
                        .HasForeignKey("message_id");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("WebApp.Models.AuthorBook", b =>
                {
                    b.Navigation("Authors");

                    b.Navigation("Books");
                });

            modelBuilder.Entity("WebApp.Models.Book", b =>
                {
                    b.Navigation("Category");

                    b.Navigation("Library");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("WebApp.Models.Message", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
